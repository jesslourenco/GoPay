// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	models "github.com/gopay/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockTransactionRepo is an autogenerated mock type for the TransactionRepo type
type MockTransactionRepo struct {
	mock.Mock
}

type MockTransactionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepo) EXPECT() *MockTransactionRepo_Expecter {
	return &MockTransactionRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, transaction
func (_m *MockTransactionRepo) Create(ctx context.Context, transaction models.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction models.Transaction
func (_e *MockTransactionRepo_Expecter) Create(ctx interface{}, transaction interface{}) *MockTransactionRepo_Create_Call {
	return &MockTransactionRepo_Create_Call{Call: _e.mock.On("Create", ctx, transaction)}
}

func (_c *MockTransactionRepo_Create_Call) Run(run func(ctx context.Context, transaction models.Transaction)) *MockTransactionRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepo_Create_Call) Return(_a0 error) *MockTransactionRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepo_Create_Call) RunAndReturn(run func(context.Context, models.Transaction) error) *MockTransactionRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: ctx, accId
func (_m *MockTransactionRepo) FindAll(ctx context.Context, accId string) []models.Transaction {
	ret := _m.Called(ctx, accId)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Transaction); ok {
		r0 = rf(ctx, accId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	return r0
}

// MockTransactionRepo_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockTransactionRepo_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - accId string
func (_e *MockTransactionRepo_Expecter) FindAll(ctx interface{}, accId interface{}) *MockTransactionRepo_FindAll_Call {
	return &MockTransactionRepo_FindAll_Call{Call: _e.mock.On("FindAll", ctx, accId)}
}

func (_c *MockTransactionRepo_FindAll_Call) Run(run func(ctx context.Context, accId string)) *MockTransactionRepo_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionRepo_FindAll_Call) Return(_a0 []models.Transaction) *MockTransactionRepo_FindAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionRepo_FindAll_Call) RunAndReturn(run func(context.Context, string) []models.Transaction) *MockTransactionRepo_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *MockTransactionRepo) FindOne(ctx context.Context, id string) (models.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepo_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockTransactionRepo_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockTransactionRepo_Expecter) FindOne(ctx interface{}, id interface{}) *MockTransactionRepo_FindOne_Call {
	return &MockTransactionRepo_FindOne_Call{Call: _e.mock.On("FindOne", ctx, id)}
}

func (_c *MockTransactionRepo_FindOne_Call) Run(run func(ctx context.Context, id string)) *MockTransactionRepo_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionRepo_FindOne_Call) Return(_a0 models.Transaction, _a1 error) *MockTransactionRepo_FindOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepo_FindOne_Call) RunAndReturn(run func(context.Context, string) (models.Transaction, error)) *MockTransactionRepo_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepo creates a new instance of MockTransactionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepo {
	mock := &MockTransactionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
